############################### DEFAULT #####################################
# Chain ID
CHAIN_ID=167000

# Exposed ports
PORT_L2_EXECUTION_ENGINE_HTTP=8547
PORT_L2_EXECUTION_ENGINE_WS=8548
PORT_L2_EXECUTION_ENGINE_METRICS=6060
PORT_L2_EXECUTION_ENGINE_P2P=30306
PORT_PROVER_SERVER=9876
PORT_PROMETHEUS=9091
PORT_GRAFANA=3001
# Comma-separated profiles to be used by default (l2_execution_engine,proposer,prover)
COMPOSE_PROFILES=l2_execution_engine

# Comma separated L2 execution engine bootnode URLs for P2P discovery bootstrap
BOOT_NODES=enode://7a8955b27eda2ddf361b59983fce9c558b18ad60d996ac106629f7f913247ef13bc842c7cf6ec6f87096a3ea8048b04873c40d3d873c0276d38e222bddd72e88@43.153.44.186:30303,enode://704a50da7e727aa10c45714beb44ece04ca1280ad63bb46bb238a01bf55c19c9702b469fb12c63824fa90f5051f7091b1c5069df1ec9a0ba1e943978c09d270f@49.51.202.127:30303,enode://f52e4e212a15cc4f68df27282e616d51d7823596c83c8c8e3b3416d7ab531cefc7b8a493d01964e1918315e6b0c7a4806634aeabb9013642a9159a53f4ebc094@43.153.16.47:30303,enode://57f4b29cd8b59dc8db74be51eedc6425df2a6265fad680c843be113232bbe632933541678783c2a5759d65eac2e2241c45a34e1c36254bccfe7f72e52707e561@104.197.107.1:30303,enode://87a68eef46cc1fe862becef1185ac969dfbcc050d9304f6be21599bfdcb45a0eb9235d3742776bc4528ac3ab631eba6816e9b47f6ee7a78cc5fcaeb10cd32574@35.232.246.122:30303

# Taiko protocol contract addresses
TAIKO_L1_ADDRESS=0x06a9Ab27c7e2255df1815E6CC0168d7755Feb19a
TAIKO_TOKEN_L1_ADDRESS=0x10dea67478c5F8C5E2D90e5E9B26dBe60c54d800
ASSIGNMENT_HOOK_L1_ADDRESS=0x537a2f0D3a5879b41BCb5A2afE2EA5c4961796F6
TAIKO_L2_ADDRESS=0x1670000000000000000000000000000000010001

# P2P
DISABLE_P2P_SYNC=false
P2P_SYNC_URL=https://rpc.mainnet.taiko.xyz

############################### REQUIRED #####################################
# L1 Holesky RPC endpoints (you will need an RPC provider such as BlockPi, or run a full Holesky node yourself)
# If you are using a local Holesky L1 node, you can refer to it as "http://host.docker.internal:8545" and "ws://host.docker.internal:8546", which refer to the default ports in the .env for an eth-docker L1 node.
# However, you may need to add this host to docker-compose.yml. If that does not work, you can try the private local ip address (e.g. http://192.168.1.15:8545). You can find that with `ip addr show` or a similar command.
L1_ENDPOINT_HTTP=
L1_ENDPOINT_WS=
# HTTP RPC endpoint of a L1 beacon node. Everything behind the top-level domain is ignored. Make sure you don't need to work with subdirectories. The path will always be /eth/v1...
L1_BEACON_HTTP=

############################### OPTIONAL #####################################
# If you want to be a prover who generates and submits zero knowledge proofs of proposed L2 blocks, you need to change
# `ENABLE_PROVER` to true and set `L1_PROVER_PRIVATE_KEY`.
ENABLE_PROVER=false
# SGX Raiko service endpoint, required if not running a guardian prover.
SGX_RAIKO_HOST=
# How many provers you want to run concurrently.
PROVER_CAPACITY=1
# A L1 account private key (with a balance of TAIKO deposited on TaikoL1) which will be used to sign the bond for proving the block.
# WARNING: only use a test account, pasting your private key in plain text here is not secure.
L1_PROVER_PRIVATE_KEY=
# Minimum accepted fee for accepting proving a block (in Gwei).
MIN_ACCEPTABLE_PROOF_FEE=1
# Amount to approve AssignmentHook + TaikoL1 contracts for TaikoToken usage. i.e 250 TAIKO = 250
TOKEN_ALLOWANCE=
# Minimum ETH balance (in ETH) a prover wants to keep.
MIN_ETH_BALANCE=
# Minimum Taiko token balance (in ether) a prover wants to keep. i.e 250 TAIKO = 250
MIN_TAIKO_BALANCE=
# Whether to prove unassigned blocks or not (blocks that have expired their proof window
# without the original prover submitting a proof.).
PROVE_UNASSIGNED_BLOCKS=false

# If you want to be a proposer who proposes L2 execution engine's transactions in mempool to Taiko L1 protocol
# contract (be a "mining L2 node"), you need to change `ENABLE_PROPOSER` to true, then fill `L1_PROPOSER_PRIVATE_KEY`.
ENABLE_PROPOSER=false
# A L1 account (with balance) private key who will send TaikoL1.proposeBlock transactions.
L1_PROPOSER_PRIVATE_KEY=
# Address of the proposed block's suggested L2 fee recipient.
L2_SUGGESTED_FEE_RECIPIENT=
# Fee sent to prover for the off-chain bond (in Gwei).
BLOCK_PROPOSAL_FEE=1
# If nobody accepts block at initial tier fee, how many iterations to increase tier fee before giving up.
MAX_TIER_FEE_BUMPS=
# Comma-delineated list (no spaces) of prover endpoints proposer should query when attempting to propose a block
# If you keep this default value you must also enable a prover by setting ENABLE_PROVER=true.
# If you start only proposer - add provers endpoint from provers maklet site: https://dojonode.xyz/tatami (wait for load and click "copy All" and paste instead of http://taiko_client_prover_relayer:9876)
PROVER_ENDPOINTS=http://taiko_client_prover_relayer:9876
# Whether to send EIP-4844 blob transactions when proposing blocks.
BLOB_ALLOWED=true
# Amount (in Gwei) that you want to tip the L1 Block Builder.
BLOCK_BUILDER_TIP=
# Comma-delimited local tx pool addresses you want to prioritize, useful to set your proposer to only propose blocks with your prover's transactions.
TXPOOL_LOCALS=
# Minimum Gas Tip for a transaction to accept for mempool (in wei).
TAIKO_MIN_TIP=

# Transaction Manager Flags (Leave blank if using default values.) These only affect Prover and Proposer.
# Fix Error 
TX_FEE_LIMIT_MULTIPLIER=
TX_FEE_LIMIT_THRESHOLD=
TX_GAS_LIMIT=
TX_MIN_BASEFEE=
TX_MIN_TIP_CAP=
TX_NOT_IN_MEMPOOL=
TX_NUM_CONFIRMATIONS=
TX_RECEIPT_QUERY=
TX_RESUBMISSION=
TX_SAFE_ABORT_NONCE_TOO_LOW=
TX_SEND_TIMEOUT=
TX_ERROR=
